# config for auditd daemon log of editing a file on MAC
# start it using the following command: sudo bin/logstash -f auditpipe.conf --config.reload.automatic --path.data ../

input {
	pipe {
		#command => "sh ../readlog.sh"
		#mail downloads of received attachments: /Users/Agnes/Library/Containers/com.apple.mail/Data/Library/Mail Downloads
		#/Users/Agnes/Library/Containers/com.apple.mail/Data
		command => "sudo auditreduce -o file='/Users/Agnes/Desktop/test/,/Users/Agnes/Desktop/sample/,/Users/Agnes/Desktop/test-2/,/Users/Agnes/.Trash/,/Volumes/,/Users/Agnes/Google Drive/test/,/Users/Agnes/Dropbox/test/' /dev/auditpipe | praudit -xn"
    	codec => multiline {
      		pattern => "<record"
      		negate => "true"
      		what => "previous"
    		}
    	}
    	#http {
         #       host => "127.0.0.1" # default: 0.0.0.0
          #      port => 9604 # default: 8080
           # }
}

filter {
    # drop first line "<?xml version='1.0' encoding='UTF-8'?>\n<audit>"
    if [message] =~ "^<\?xml" {
        drop{}
    }

    # drop record in case no path tag is contained in event
    if [message] !~ "<path" {
       drop{}
    }

	#set ID of Log Entry
	uuid {
  		target => "id"
	}

	## interpret the message payload as XML
	xml {
   		source => "message"
    	store_xml => false
    	suppress_empty => true
    	force_array => false
    	xpath =>
    	[
    		"/record/@event", "accessCall",
    		"/record/@time", "timestampLog",
       		"/record/path/text()", "pathname",
       		"/record/subject/@pid", "pid",
       		"/record/subject/@uid", "username"
       	]
  	}

  	mutate {
    	add_field => {"logTypeName" => "UnixAuditdFile"}
    	replace => {"username" => "%{username[0]}"}
		replace => { "accessCall" => "%{accessCall[0]}" }
		replace => { "timestampLog" => "%{timestampLog[0]}" }
		replace => { "pid" => "%{pid[0]}" }
	}

	#ruby {# not supported anymore - thows errors
     #    code => "event['index_day'] = event['@timestamp'].localtime.strftime('%Y.%m.%d')"
      #  }

#commented out because parsing sets time 2 hours in past (again something may be hardcoded - maybe parsing in service is better)
	date {
	   #timezone => "Europe/Vienna"
	   timezone => "UTC"
	   locale => "en"
       match => [ "timestampLog", "EEE MMM dd HH:mm:ss yyyy" ]
       target => "timestampLog"
    }

  	mutate {
		rename => { "message" => "logMessage" }
     	remove_field => [ "tags",  "@version", "command", "@timestamp", "headers" ]
  	}
}

output {
  	websocket{}
  	file {
            path => "/Users/Agnes/Desktop/output/log.txt"
            write_behavior => "append"
        }
}
